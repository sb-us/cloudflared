
name: VM Start

on:
  workflow_dispatch:
  repository_dispatch:
#concurrency:
#  group: ${{ github.workflow }}-${{ github.ref }}
#  cancel-in-progress: true

jobs:
  #pre_job:
  #  # continue-on-error: true # Uncomment once integration is finished
  #  runs-on: ubuntu-latest
  #  # Map a step output to a job output
  #  outputs:
  #    should_skip: ${{ steps.skip_check.outputs.should_skip }}
  #  steps:
  #    - id: skip_check
  #      uses: fkirc/skip-duplicate-actions@v4
  #      with:
  #        # All of these options are optional, so you can remove them if you are happy with the defaults
  #        concurrent_skipping: 'always'
  #        skip_after_successful_duplicate: 'false'
  #        do_not_skip: '["workflow_dispatch"]'

  job1:
  #  needs: pre_job
  #  if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    
    runs-on: ubuntu-24.04 #ubuntu-latest
    steps:
      - name: Setting up basic deamons
        env:
          CfdToken: ${{ secrets.CFDTOKEN }}
          TtyPwd: ${{ secrets.TTYPWD }}
        run: |
          mkdir deamons
          cd  deamons
          
          wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O cfd || wget https://github.com/cloudflare/cloudflared/releases/download/2023.3.1/cloudflared-linux-amd64 -O cfd
          chmod 777 cfd
          #while true; do ./cfd  tunnel run --force --token $CfdToken ; done &
          bash -c "while true; do ./cfd  tunnel --no-autoupdate run --token $CfdToken ; done" &>> /tmp/cfd.log &
          
          wget https://github.com/tsl0922/ttyd/releases/latest/download/ttyd.x86_64 -O td || wget https://github.com/tsl0922/ttyd/releases/download/1.7.2/ttyd.x86_64 -O td
          chmod 777 td
          #while true; do ./td -p 2222 -P 90 -b /webssh -c subhash:${TtyPwd} -t fontSize=16 bash ; done &
          bash -c "while true; do ./td -W -p 2222 -P 90 -b /webssh -w ../ -c subhash:${TtyPwd} -t fontSize=16 -t enableSixel=true bash ; done" &>> /tmp/ttyd.log &
          
          wget https://github.com/mjpclab/go-http-file-server/releases/download/v1.15.3/ghfs-1.15.3-linux-amd64.zip -O ghfs.zip
          unzip ghfs.zip
          #while true; do sudo ./ghfs -l :9091  --global-delete -U --global-mkdir -A --prefix /fileserver -r / --global-auth --user subhash:${TtyPwd} ; done &
          bash -c "while true; do sudo ./ghfs -l :9091  --global-delete -U --global-mkdir -A --prefix /fileserver -r / --global-auth --user subhash:${TtyPwd} ; done" &>> /tmp/ghfs.log &
          
      - name: CLAC setup
        env:
          QALCCONF: ${{ secrets.QALCCONF }}
        run: |
          export START_TIME=$(date '+%s');
          cd  deamons
          #curl -s https://api.github.com/repos/Qalculate/libqalculate/releases/latest | grep ".*-x86_64\.tar\.xz" | cut -d : -f 2,3 | tr -d \" | wget -qi - -O - | tar -xvJf -
          #mv qalculate-* qalculate
          mkdir qalculate
          #wget https://github.com/SubhashBose/libq_mod/releases/download/2023-11-01_214029/qalc -O qalculate/qalc
          wget https://github.com/SubhashBose/libq_mod/releases/latest/download/qalc-amd64 -O qalculate/qalc
          chmod 777 qalculate/qalc
          echo "$QALCCONF" | base64 --decode | sudo tar -zxvf -  --directory ./qalculate
          rm -f ./qalculate/user/qalc.history
          mkdir ./qalculate/user/qalc.history
          sudo find ./qalculate/user/ -type f -exec chmod 444 -- {} +
          
          export GNUTERM=sixelgd
          export LANG="en_US.utf8"
          
          echo '#!/bin/bash
          export TZ=UTC
          qalc_basedir=$(dirname "${BASH_SOURCE[0]}")/qalculate
          qalc_userdir=${qalc_basedir}/user
          export QALCULATE_USER_DIR=$qalc_userdir
          #export XDG_CACHE_HOME=$qalc_userdir
          #export XDG_DATA_HOME=$qalc_userdir
          #export XDG_CONFIG_HOME=$qalc_userdir
          if [ "$1" == "gui" ]
          then
          ${qalc_basedir}/qalculate 2> /dev/null &
          else
          #echo $(${qalc_basedir}/qalc -t "6h - `awk "{print $1}" /proc/uptime`s")"  remaining for next system reset"
          #echo `${qalc_basedir}/qalc -t "6h - uptime"`"  remaining until next system reset"
          num="\033[0;36m"
          rst="\033[0m"
          var="\033[0;33m\033[3m"
          uni="\033[0;32m"
          fun="\033[1;34m"
          echo -e ${fun}`${qalc_basedir}/qalc -t "round((${START_TIME}s +$(cat runtime.const)s - timestamp()*s)/60s)*60s"`"${rst}  remaining until next system reset"
          echo ""
          echo -e "Visit homepage: \033[1;35mhttps://astro.subhashbose.com/tools/calculator${rst}"
          echo ""
          echo Examples to try:
          echo -e "${fun}jd${rst}  OR  ${fun}jd${rst}(${num}2022-01-15T5:45:06${rst})       #Julian date for now or a given time"
          echo -e "${fun}sidereal_time${rst}(${var}Longitude${rst}, ${var}[Date]${rst})     #calculate Sidereal time with date optional"
          echo -e "${num}30.5${uni}DM${rst} to ${uni}Mpc${rst}  OR   ${num}12.5${uni}Mpc${rst} to ${uni}DM${rst}    #Convert between Distance modulus and Mpc"
          echo -e "${fun}DL${rst}(${num}0.02${rst})                             #Luminosity distance from redshift"
          echo -e "${fun}ExtA_λ${rst}(${num}5000${uni}angstrom${rst}, ${num}1.0${rst}, ${num}3.1${rst})       #CCM Extiction law for given λ (and Av, Rv)"
          echo -e "${uni}erg/(s angstrom cm^2)${rst} to ${uni}watt/m^3${rst}    #Unit conversion of results"
          echo -e "${fun}filter${rst}(${var}V${rst},${var}wl${rst})    OR    ${fun}filter${rst}(${var}V${rst},${var}f0${rst})   #Photometric filter database to get λ or zeropt flux"
          echo -e "(${var}x${rst} + ${var}y${rst})/${num}6${rst} /. ${var}x${rst}=${num}5${rst}, ${var}y${rst}=${num}7${rst}                #One-line variable substiution in an expression"
          echo -e "${fun}plot${rst}(${fun}lookback_distance${rst}(${var}x${rst}))           #Inline plotting"
          echo ""
          echo Few tips:
          echo Hit Tab for syntax completion.
          echo Highlight text to copy and CTRL+SHIFT+V to paste.
          echo -e Use units as needed like ${uni}ergs/s${rst}, ${uni}Mpc${rst}, ${uni}AU${rst}, ${uni}deg${rst}, ${uni}rsun${rst}, ${uni}msun${rst}, etc. e.g, "${num}1.2E42 ${uni}erg/s${rst} * (${num}7${uni}day${rst} ${num}5${uni}h${rst}) to ${uni}Joule${rst}"
          echo -e "Use \"+/-\" to include error. e.g, ${fun}sin${rst}(${num}30${rst}+/-${num}7${rst} ${uni}deg${rst}) = ${num}0.50±0.11${rst}"
          echo -e "Use \"set precision ${num}20${rst}\"              to set result precision."
          echo -e "Use \"set scientific notation ${num}4${rst}\"     to set results in scientific notations."
          echo "Use \"set fractions mixed\"           For mixed fraction representation."
          echo -e "Type \"${fun}list${rst}\" to list all available astrophysics and other special functions."
          echo -e "Use \"${fun}help${rst} NAME\" or \"${fun}info${rst} NAME\" with a function NAME to get detail help."
          echo -e "Use \"${fun}find${rst} PARTIAL_NAME\" to search function, constants, units."
          echo ""
          ${qalc_basedir}/qalc "$@" 2> /dev/null
          fi
          ' > calc
          chmod 777 calc
          grep -v 'echo' calc >calc0
          chmod 777 calc0
          sudo ./calc0 -e 0 &
          ./calc0 -t 'randbetween(35*60,58*60)+5*3600' >runtime.const &
          
          sudo ./calc0 -t <<EOF &
          save(0, command(), 'del')
          save(0, load(), 'del')
          save definitions
          EOF
          
          #while true; do ./td -p 8975 -P 90 -t fontSize=16 ./calc ; done &
          bash -c "while true; do ./td -W -p 8975 -P 90 -t fontSize=16 -t disableResizeOverlay=true -t titleFixed=Calculator -t enableSixel=true -O ./calc -m 3000 ; done" &>> /tmp/calc.log &
          echo 'echo `"'$(readlink -f .)'/calc0" -t "round(('${START_TIME}'s +$(cat "'$(readlink -f .)'/runtime.const")s - timestamp()*s)/60s)*60s"`"  remaining until next system reset"' >> ~/.bashrc
          
      - name: OpenVPN setup
        env:
          OVPNCONF_TARGZ: ${{ secrets.OVPNCONF_TARGZ }}
        run: |
          #sudo apt update
          #sudo apt install openvpn
          #sudo apt install gnuplot-nox &> /dev/null &
          sudo wget https://github.com/SubhashBose/gnuplot-5.4-nox-4Calc/releases/latest/download/gnuplot-amd64 -O /usr/local/bin/gnuplot
          sudo chmod 777  /usr/local/bin/gnuplot
          
          exit 0  #Disabling rest of this step
          
          echo "$OVPNCONF_TARGZ" | base64 --decode | sudo tar -zxvf -  --directory /
          
          sudo systemctl enable --now openvpn-server@server.service
          sudo systemctl restart openvpn-server@server.service
          sudo sh -c 'echo "net.ipv4.ip_forward = 1" >>/etc/sysctl.conf'
          sudo sysctl -p
          sudo sh -c 'echo "
          # START OPENVPN RULES
          # NAT table rules
          *nat
          :POSTROUTING ACCEPT [0:0]
          # Allow traffic from OpenVPN client to eth0 (change to the interface you discovered!)
          -A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE
          COMMIT
          # END OPENVPN RULES
          " > /etc/ufw/before.rules.tmp'
          sudo sh -c 'cat /etc/ufw/before.rules >> /etc/ufw/before.rules.tmp'
          sudo mv -f /etc/ufw/before.rules.tmp /etc/ufw/before.rules
          sudo sed -i -e 's/DEFAULT_FORWARD_POLICY="DROP"/DEFAULT_FORWARD_POLICY="ACCEPT"/g' /etc/default/ufw
          sudo ufw disable
          sudo ufw enable

      - name: Delete old runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 00
          keep_minimum_runs: 0
          
          
      - name: Wait and cleanup
        env:
          WH: ${{ secrets.WEBHOOK }}
        run: |
          sleep $(( $(cat deamons/runtime.const) - 120 )) || sudo find /dev/pts/ -type c -name "[0-9]*" -exec bash -c 'echo -e "\n\e[1;93mNotice: Initiating unplanned maintainance reboot by Admin.\e[0m" > {}' \;
          sudo find /dev/pts/ -type c -name "[0-9]*" -exec bash -c 'echo -e "\n\e[1;92mNotice: System is going to reset in 2 minutes.\e[0m" > {}' \;
          sleep 120 || echo ''
          sudo find /dev/pts/ -type c -name "[0-9]*" -exec bash -c 'echo -e "\nNow system is resetting. Try reconnecting after 10 seconds." > {}' \;
          ps -ax | grep "bash -c while" | grep -v "grep" | awk '{print $1}' | xargs -n1 kill || echo ''
          ps -ax | grep "\./cfd" | grep -v "grep" | awk '{print $1}' | xargs -n1 kill || echo ''
          ps -ax | grep "\./td" | grep -v "grep" | awk '{print $1}' | xargs -n1 kill || echo ''
          ps -ax | grep "\./ghfs" | grep -v "grep" | awk '{print $1}' | xargs -n1 sudo kill || echo ''
          eval "$WH"


